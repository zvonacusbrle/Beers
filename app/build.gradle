plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id "org.jlleitschuh.gradle.ktlint" version "11.5.1"
    id "com.apollographql.apollo3" version "3.8.2"
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'




}
apollo {
    service("service") {
        packageName.set("com.example")
    }
}

android {
    namespace 'com.example.rockets'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.rockets"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    android.sourceSets.main.java.srcDirs += 'src/main/graphql'


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    packagingOptions {
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    apollo {
        service("RocketsGraphQL") {
            packageName.set("com.example.rockets")

            introspection{
                endpointUrl.set("https://spacex-production.up.railway.app/")
                schemaFile.set(file("src/main/graphql/com/example/rockets/schema.sdl"))

            }
        }
    }
}
tasks.getByPath("preBuild").dependsOn("ktlintFormat")

ktlint {
    android = true
    debug.set(false)
    verbose.set(false)
    outputToConsole.set(true)
    ignoreFailures.set(false)
    enableExperimentalRules.set(false)

    disabledRules.set(["final-newline","no-wildcard-imports"])

    reporters {
        reporter "plain"
        reporter "checkstyle"
        reporter "sarif"
    }
}

dependencies {
    implementation libs.core.ktx
    implementation libs.lifecycle.runtime.ktx
    implementation libs.activity.compose
    implementation libs.compose.ui
    implementation libs.compose.ui.tooling.preview
    implementation libs.compose.material3
    implementation libs.koin
    implementation libs.graphql
    implementation libs.hilt.implementation
    implementation libs.hilt.kapt
    implementation libs.lifecycle.live.data

    testImplementation libs.junit
    testImplementation libs.roboelectric
    androidTestImplementation libs.androidx.test.ext.junit
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.compose.ui.test.junit4
    debugImplementation libs.compose.ui.tooling
    debugImplementation libs.compose.ui.test.manifest

    implementation("com.apollographql.apollo3:apollo-runtime:3.8.2")
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1")

    kapt("androidx.hilt:hilt-compiler:1.0.0")
    implementation("androidx.hilt:hilt-navigation-compose:1.0.0")








}